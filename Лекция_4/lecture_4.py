# Функции высшего порядка

# def f(x):
#     return x ** 2
# print(f(2))

# # Функция в примере занимает всего две строчки кода, но в дальнейшем размеры описания функций будут увеличиваться.
# # И тогда сокращение кода будет актуальным.

# def f(x):
#     return x ** 2
# print(type(f))

# Тип данных у функции <class 'function'>

# def f(x):
#     return x ** 2
# g = f
# print(f(2))
# print(g(2))

# Зачем это может потребоваться?

# def calk_1(a):
#     return a + a

# def calk_2(a):
#     return a * a

# def math(op, x): # op - операция (сложение, вычитание и т.д.)
#     print(op(x))

# math(calk_2, 5)

# С двумя переменными:

# def sum(a, b):
#     return a + b

# def mult(a, b):
#     return a * b

# def calk(op, x, y): # op - операция (сложение, вычитание и т.д.)
#      print(op(x, y))

# calk(mult, 4, 5)

# lambda - функция

# def sum(a, b):
#     return a + b
# <=> (равносильно)
# calk = lambda a, b: a + b

# def calk(op, x, y): # op - операция (сложение, вычитание и т.д.)
#     print(op(x, y))
# calk(lambda a, b: a * b, 5, 45)

# Задача:
# В списке хранятся числа. Нужно выбрать только чётные числа и составить
# список пар (число; квадрат числа).
# Пример: 1 2 3 5 8 15 23 38
# Получить: [(2, 4), (8, 64), (38, 1444)]

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# out = []
# for i in data :
#     if i % 2 == 0:
#         out.append((i, i ** 2))
# print(out)

# С lambda-функцией

# def select(f, col):
#     return [f(x) for x in col]
# def where(f, col):
#     return [x for x in col if f(x)]
# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res = select(int, data)
# res = where(lambda x: x % 2 == 0, res)
# print(res) # [2, 8, 38]
# res = list(select(lambda x: (x, x ** 2), res))
# print(res)

# Функция map - применяет указанную функцию к каждому элементу итерируемого объекта
#               и возвращает итератор с новым объектом.

# list_1 = [x for x in range (1,20)]
# list_1 = list(map(lambda x: x + 10, list_1 ))
# print(list_1)

# Задача: 
# C клавиатуры вводится некий набор чисел, в качестве разделителя
# используется пробел. Этот набор чисел будет считан в качестве строки. Как
# превратить list строк в list чисел?

# data = '1 2 3 5 8 15 23 38'.split() # Строка.split() - убирает все пробелы и создает список из значений строки
# print(data)

# data = list(map(int, input().split()))
# Результата работы map - это итератор. Чтобы работать несколько раз с одними данными, нужно сохранить данные
#                                       (например, ввиде списка). 
# map() позволит избавиться от функции select

# def where(f, col):
#     return [x for x in col if f(x)]
# data = '1 2 3 5 8 15 23 38'.split()

# res = map(int, data)
# res = where(lambda x: x % 2 == 0, res)
# res = list(map(lambda x: (x, x ** 2), res))
# print(res)

# Функция filter() прменяет указанную функцию к каждому элементу итерируемого объекта и возвращает итератор 
#                  с теми объектами, для которых функция вернула True.

# data = [x for x in range(10)]
# res = list(filter(lambda x: x % 2 == 0, data))
# print(res)

# filter() позволит избавиться от функции where

# Задача:
# В списке хранятся числа. Нужно выбрать только чётные числа и составить
# список пар (число; квадрат числа).
# Пример: 1 2 3 5 8 15 23 38
# Получить: [(2, 4), (8, 64), (38, 1444)]

# data = '1 2 3 5 8 15 23 38'.split()
# res = map(int, data)
# res = filter(lambda x: x % 2 == 0, res)
# res = list(map(lambda x: (x, x ** 2), res))
# print(res)

# Функция zip() - применяется к набору итерируемых объектов и 
#                 возвращает итератор с кортежами из элементов входных данных.

# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ids = [4, 5, 9, 14, 7]
# data = list(zip(users, ids))
# print(data)

# Функция zip() пробегает по минимальному входящему набору:

# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ids = [4, 5, 9, 14, 7]
# salary = [111, 222, 333]
# data = list(zip(users, ids, salary))
# print(data)

# Функция enumerate() - применяется к итерируемому объекту и возвращает
#                       новый итератор с кортежами из индекса и элементов
#                       входных данных.

# Функция enumerate() позволяет пронумеровать набор данных.

# users = ['user1', 'user2', 'user3']
# data = list(enumerate(users))
# print(data)

# Файлы

# Файлы в текстовом формате используются для:
#   ● Хранения данных
#   ● Передачи данных в клиент-серверных проектах
#   ● Хранения конфигов
#   ● Логирования действий
# Что нужно для работы с файлами:
#   1. Завести переменную, которая будет связана с этим текстовым файлом.
#   2. Указать путь к файлу.
#   3. Указать, в каком режиме мы будем работать с файлом.

# Варианты режима (мод):

# 1. a – открытие для добавления данных.
#   - Позволяет дописывать что-то в имеющийся файл.
#   - Если вы попробуете дописать что-то в несуществующий файл, то файл
#     будет создан и в него начнётся запись.
# 2. r – открытие для чтения данных.
#   - Позволяет читать данные из файла.
#   - Если вы попробуете считать данные из файла, которого не существует,
#     программа выдаст ошибку.
# 3. w – открытие для записи данных.
#   - Позволяет записывать данные и создавать файл, если его не
#     существует.
# 
# Миксованные режимы:
# 4. w+
#   - Позволяет открывать файл для записи и читать из него.
#   - Если файла не существует, он будет создан.
# 5. r+
#   - Позволяет открывать файл для чтения и дописывать в него.
#   - Если файла не существует, программа выдаст ошибку.

# Примеры использования различных режимов в коде:

# 1. Режим a
colors = ['red', 'green', 'blue']
data = open('file.txt', 'a') # здесь указываем режим, в котором будем работать
data.writelines(colors) # разделителей не будет
data.close()

# ● data.close() — используется для закрытия файла, чтобы разорвать
#   подключение файловой переменной с файлом на диске.
# ● exit() — позволяет не выполнять код, прописанный после этой команды в
#   скрипте.

# ● В итоге создаётся текстовый файл с текстом внутри: redbluedreen.
# ● При повторном выполнении скрипта redbluedreenredbluedreen — добавление
#   в существующий файл, а не перезапись файлов.

# Ещё один способ записи данных в файл:

# with open('file.txt', 'w') as data:
#     data.write('line 1\n')
#     data.write('line 2\n')

# 2. Режим r
# ● Чтение данных из файла:
# path = 'file.txt'
# data = open(path, 'r')
# for line in data:
#     print(line)
# data.close()

# 3. Режим w

# colors = ['red', 'green', 'blue']
# data = open('file.txt', 'w')
# data.writelines(colors) # разделителей не будет
# data.close()

# ● В итоге создаётся текстовый файл с текстом внутри: ‘redbluedreen’.
# ● В случае перезаписи новые данные записываются, а старые удаляются.

# Модуль os

# Модуль os предоставляет множество функций для работы с операционной
# системой, причем их поведение, как правило, не зависит от ОС, поэтому программы
# остаются переносимыми.
# Для того, чтобы начать работать с данным модулем необходимо его импортировать
# в свою программу:

# import os

# Познакомимся с базовыми функциями данного модуля:
# ● os.chdir(path) - смена текущей директории.
# import os
# os.chdir('G:/Разработчик/Python_course')

# ● os.getcwd() - текущая рабочая директория
# import os
# print(os.getcwd()) # 'G:\Разработчик\Python_course'

# ● os.path - является вложенным модулем в модуль os и реализует некоторые
# полезные функции для работы с путями, такие как:
# ○ os.path.basename(path) - базовое имя пути
# import os
# print(os.path.basename('G:/Разработчик/Python_course/Лекция_4/lecture_4.py')) # lecture_4.py

# ● os.path.abspath(path) - возвращает нормализованный абсолютный путь.
# import os
# print(os.path.abspath('lecture_4.py')) # 'G:/Разработчик/Python_course/lecture_4.py'

# Модуль shutil

# Модуль shutil содержит набор функций высокого уровня для обработки файлов,
#               групп файлов, и папок. В частности, доступные здесь функции позволяют
#               копировать, перемещать и удалять файлы и папки.
 
# Часто используется вместе с модулем os.

# Для того, чтобы начать работать с данным модулем необходимо его импортировать
# в свою программу:

# import shutil

# Познакомимся с базовыми функциями данного модуля:
# ● shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла src в
#                               файл dst.
# ● shutil.copy(src, dst) - копирует содержимое файла src в файл или папку dst.
# ● shutil.rmtree(path) - Удаляет текущую директорию и все поддиректории; 
#                 path  - должен указывать на директорию, а не на символическую ссылку.
